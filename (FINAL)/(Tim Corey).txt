Why Do Software Development Projects Fail?
https://youtu.be/FxmFTYElgig
------------------------------------------

1.  Comience con buenos requsitos:
    => Las suposiciones matan proyectos

2.  Establezca los entregables de la versión #1
    => Fechas y características de tal forma que queda exactamente establecido:
        * Qué entregará
        * Cuándo entregará

3.  Detenga el arrastre de características (Feature Creep)
    => El avance de funciones (Feature Creep, Aumento de Funciones) es la expansión continua excesiva o la adición de nuevas funciones en un producto, especialmente en software de computadora. Se evita teniendo una muy clara definición de Entregables de la Versión 1 (punto 2)

4.  Comunique el peligro de los cambios a mitad del desarrollo
    => Si bien está relacionado con los puntos 2 (entregables) y 3 (incremento), esto más bien apunta a una programación defensiva (anticipatoria) en la que no es necesario escribir código para todas las eventualidades sino escribir código que se anticipe (prepare la estructura) para lo que seguramente el cliente luego pedirá (tome como fuente el punto 3, Feature Creep, Incremento de Funciones)

5.  Mantenga el proyecto pequeño
    => Mientras más grande sea el proyecto, más difícil es mantenerlo bajo control (por eso, aunque los microservicios no son recomendables en proyectos a gran escala, pero en proyectos pequeños pueden ser de gran beneficio)

6.  Divida su producto en partes
    => Vea qué partes se pueden construir que no dependan de otras partes y comience desde allí

7.  No escriba a gran escala (Escala Google)
    => Constrúyalo de manera eficiente y preocúpese por la escalabilidad luego (cuando la necesite): Tengo 400 mil suscriptores. Uso SignalR sin problemas. Nunca he tenido problemas de escalabilidad con SignalR en ninguno de mis servicios. El sitio de sugerencias usa Blazor Server con SignalR sin problemas (incluso cuando lo anuncié y lo lancé, que fue el momento de mayor afluencia). No estoy teniendo problemas como ésos porque no estoy a la escala de Google. No soy una universidad pública donde se hace la inscripción el mismo día para 50 mil estudiantes. Escriba un código eficiente y no haga un código complejo porque usted está tratando de descubrir cómo ser súper-escalable.

8.  Aprenda a construir con éxito cosas pequeñas antes de construir cosas más grandes
    => Esto es algo que los desarrolladores odian escuchar (especialmente cuando inician)

9.  Balancee su optimismo con la realidad
    => Nace del concepto de que tus ojos son más grandes que tu estómago: Tener experiencia en la revisión y construcción de proyectos es realmente importante ya que te permite ver que ese proyecto de fin de semana en la realidad te va a llevar un mes.
